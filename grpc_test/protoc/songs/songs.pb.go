// Code generated by protoc-gen-go.
// source: songs.proto
// DO NOT EDIT!

/*
Package songs is a generated protocol buffer package.

It is generated from these files:
	songs.proto

It has these top-level messages:
	SingerID
	Singer
	Song
	SongList
*/
package songs

import "github.com/golang/protobuf/proto"
import "fmt"
import "math"

import (
	"golang.org/x/net/context"
	"google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type SingerID struct {
	ID int32 `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
}

func (m *SingerID) Reset()                    { *m = SingerID{} }
func (m *SingerID) String() string            { return proto.CompactTextString(m) }
func (*SingerID) ProtoMessage()               {}
func (*SingerID) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type Singer struct {
	ID     int32   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Gender bool    `protobuf:"varint,3,opt,name=gender" json:"gender,omitempty"`
	Height float64 `protobuf:"fixed64,4,opt,name=height" json:"height,omitempty"`
}

func (m *Singer) Reset()                    { *m = Singer{} }
func (m *Singer) String() string            { return proto.CompactTextString(m) }
func (*Singer) ProtoMessage()               {}
func (*Singer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Song struct {
	ID     int32   `protobuf:"varint,1,opt,name=ID" json:"ID,omitempty"`
	Name   string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Singer *Singer `protobuf:"bytes,3,opt,name=singer" json:"singer,omitempty"`
}

func (m *Song) Reset()                    { *m = Song{} }
func (m *Song) String() string            { return proto.CompactTextString(m) }
func (*Song) ProtoMessage()               {}
func (*Song) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Song) GetSinger() *Singer {
	if m != nil {
		return m.Singer
	}
	return nil
}

type SongList struct {
	Songs []*Song `protobuf:"bytes,1,rep,name=songs" json:"songs,omitempty"`
}

func (m *SongList) Reset()                    { *m = SongList{} }
func (m *SongList) String() string            { return proto.CompactTextString(m) }
func (*SongList) ProtoMessage()               {}
func (*SongList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *SongList) GetSongs() []*Song {
	if m != nil {
		return m.Songs
	}
	return nil
}

func init() {
	proto.RegisterType((*SingerID)(nil), "songs.SingerID")
	proto.RegisterType((*Singer)(nil), "songs.Singer")
	proto.RegisterType((*Song)(nil), "songs.Song")
	proto.RegisterType((*SongList)(nil), "songs.SongList")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
//const _ = grpc.SupportPackageIsVersion3

// Client API for SongListService service

type SongListServiceClient interface {
	// return the list of song belong to this singer
	ListSongs(ctx context.Context, in *SingerID, opts ...grpc.CallOption) (*SongList, error)
	// return a song belong to this singer
	GetSongs(ctx context.Context, in *SingerID, opts ...grpc.CallOption) (SongListService_GetSongsClient, error)
}

type songListServiceClient struct {
	cc *grpc.ClientConn
}

func NewSongListServiceClient(cc *grpc.ClientConn) SongListServiceClient {
	return &songListServiceClient{cc}
}

func (c *songListServiceClient) ListSongs(ctx context.Context, in *SingerID, opts ...grpc.CallOption) (*SongList, error) {
	out := new(SongList)
	err := grpc.Invoke(ctx, "/songs.SongListService/ListSongs", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *songListServiceClient) GetSongs(ctx context.Context, in *SingerID, opts ...grpc.CallOption) (SongListService_GetSongsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_SongListService_serviceDesc.Streams[0], c.cc, "/songs.SongListService/GetSongs", opts...)
	if err != nil {
		return nil, err
	}
	x := &songListServiceGetSongsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type SongListService_GetSongsClient interface {
	Recv() (*Song, error)
	grpc.ClientStream
}

type songListServiceGetSongsClient struct {
	grpc.ClientStream
}

func (x *songListServiceGetSongsClient) Recv() (*Song, error) {
	m := new(Song)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for SongListService service

type SongListServiceServer interface {
	// return the list of song belong to this singer
	ListSongs(context.Context, *SingerID) (*SongList, error)
	// return a song belong to this singer
	GetSongs(*SingerID, SongListService_GetSongsServer) error
}

func RegisterSongListServiceServer(s *grpc.Server, srv SongListServiceServer) {
	s.RegisterService(&_SongListService_serviceDesc, srv)
}

func _SongListService_ListSongs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SingerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SongListServiceServer).ListSongs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/songs.SongListService/ListSongs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SongListServiceServer).ListSongs(ctx, req.(*SingerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _SongListService_GetSongs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SingerID)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(SongListServiceServer).GetSongs(m, &songListServiceGetSongsServer{stream})
}

type SongListService_GetSongsServer interface {
	Send(*Song) error
	grpc.ServerStream
}

type songListServiceGetSongsServer struct {
	grpc.ServerStream
}

func (x *songListServiceGetSongsServer) Send(m *Song) error {
	return x.ServerStream.SendMsg(m)
}

var _SongListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "songs.SongListService",
	HandlerType: (*SongListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListSongs",
			Handler:    _SongListService_ListSongs_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetSongs",
			Handler:       _SongListService_GetSongs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("songs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 240 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x90, 0x4f, 0x4b, 0xc4, 0x30,
	0x10, 0xc5, 0x77, 0xba, 0xdd, 0xd2, 0x9d, 0xa2, 0x85, 0x39, 0x48, 0xd8, 0x53, 0x0c, 0x08, 0x39,
	0xe8, 0x2a, 0xf5, 0x2b, 0x14, 0xa4, 0xe0, 0xc5, 0xf4, 0xea, 0xc5, 0x3f, 0x43, 0xb6, 0x07, 0x93,
	0xa5, 0x2d, 0x7e, 0x7e, 0x69, 0xd2, 0x85, 0x2a, 0x08, 0x7b, 0xcb, 0xcb, 0xef, 0xe5, 0xcd, 0xbc,
	0x60, 0x31, 0x78, 0x67, 0x87, 0xfd, 0xb1, 0xf7, 0xa3, 0xa7, 0x4d, 0x10, 0x6a, 0x87, 0x79, 0xdb,
	0x39, 0xcb, 0x7d, 0x53, 0xd3, 0x25, 0x26, 0x4d, 0x2d, 0x40, 0x82, 0xde, 0x98, 0xa4, 0xa9, 0xd5,
	0x2b, 0x66, 0x91, 0xfd, 0x25, 0x44, 0x98, 0xba, 0xb7, 0x2f, 0x16, 0x89, 0x04, 0xbd, 0x35, 0xe1,
	0x4c, 0x57, 0x98, 0x59, 0x76, 0x9f, 0xdc, 0x8b, 0xb5, 0x04, 0x9d, 0x9b, 0x59, 0x4d, 0xf7, 0x07,
	0xee, 0xec, 0x61, 0x14, 0xa9, 0x04, 0x0d, 0x66, 0x56, 0xea, 0x05, 0xd3, 0xd6, 0x3b, 0x7b, 0x56,
	0xf6, 0x0d, 0x66, 0x43, 0xd8, 0x24, 0x64, 0x17, 0xd5, 0xc5, 0x3e, 0x56, 0x89, 0xeb, 0x99, 0x19,
	0xaa, 0x3b, 0xcc, 0xa7, 0xc8, 0xe7, 0x6e, 0x18, 0xe9, 0x1a, 0x63, 0x43, 0x01, 0x72, 0xad, 0x8b,
	0xaa, 0x38, 0xbd, 0xf0, 0xce, 0x9a, 0x48, 0xaa, 0x23, 0x96, 0x27, 0x7b, 0xcb, 0xfd, 0x77, 0xf7,
	0xc1, 0x74, 0x8f, 0xdb, 0x20, 0x27, 0x4e, 0xe5, 0xaf, 0x29, 0x4d, 0xbd, 0x2b, 0x17, 0x21, 0x93,
	0x4d, 0xad, 0xe8, 0x16, 0xf3, 0x27, 0xfe, 0xcf, 0xbf, 0x1c, 0xaa, 0x56, 0x0f, 0xf0, 0x9e, 0x85,
	0xbf, 0x7f, 0xfc, 0x09, 0x00, 0x00, 0xff, 0xff, 0x37, 0xa0, 0x8b, 0xa7, 0x8a, 0x01, 0x00, 0x00,
}
